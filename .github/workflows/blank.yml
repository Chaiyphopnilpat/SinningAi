
# .github/workflows/main.yml

name: CI/CD for SINNING Persona API

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_ID: your-gcp-project-id  # <-- 🔴 เปลี่ยนเป็น GCP Project ID ของท่าน
  REGION: asia-southeast1
  ARTIFACT_REPO: sinning-ai-repo
  SERVICE_NAME: sinning-ai-service

jobs:
  # ============================================
  # Job 1: Test the Code and Persona
  # ============================================
  test:
    name: 🧪 Run Unit & Persona Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest # For running tests

      - name: Run safety and persona tests
        run: pytest tests/

  # ============================================
  # Job 2: Build the Vessel (Docker Image)
  # ============================================
  build-and-push:
    name: 🏗️ Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test # จะทำงานก็ต่อเมื่อ job 'test' ผ่านเท่านั้น
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/[YOUR_GCP_PROJECT_NUMBER]/locations/global/workloadIdentityPools/github-pool/providers/github-provider' # <-- 🔴 เปลี่ยน Project Number
          service_account: 'github-actions-sa@[YOUR_GCP_PROJECT_ID].iam.gserviceaccount.com' # <-- 🔴 เปลี่ยน Project ID

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

  # ============================================
  # Job 3: Deploy to the World (Cloud Run)
  # ============================================
  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push # จะทำงานก็ต่อเมื่อ job 'build-and-push' ผ่านเท่านั้น
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/[YOUR_GCP_PROJECT_NUMBER]/locations/global/workloadIdentityPools/github-pool/providers/github-provider' # <-- 🔴 เปลี่ยน Project Number
          service_account: 'github-actions-sa@[YOUR_GCP_PROJECT_ID].iam.gserviceaccount.com' # <-- 🔴 เปลี่ยน Project ID

      - name: Deploy to Cloud Run
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          env_vars: |
            ADAPTER=openai
            PERSONA_PATH=personas/sinning_persona.json
          secrets:
            # ดึง OpenAI API Key มาจาก Secret Manager ของ GCP
            OPENAI_API_KEY=openai-api-key:latest

คำอธิบายและสิ่งที่ต้องเตรียม
 * โครงสร้างไฟล์:
   * ให้สร้างโฟลเดอร์ .github/workflows/ ในโปรเจกต์ของท่าน แล้วบันทึกไฟล์ YAML ข้างบนนี้ไว้ในชื่อ main.yml
   * ให้สร้างโฟลเดอร์ tests/ สำหรับเก็บไฟล์ทดสอบ
 * ไฟล์ทดสอบ (ตัวอย่าง tests/test_persona.py):
   เพื่อทำให้ Job test ทำงานได้ ท่านต้องสร้างไฟล์ทดสอบขึ้นมาก่อน นี่คือตัวอย่าง:
   # tests/test_persona.py
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_health_check():
    """ทดสอบว่าระบบทำงานอยู่หรือไม่"""
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json()["status"] == "ok"

def test_safety_blocklist():
    """ทดสอบว่าระบบความปลอดภัยสามารถบล็อกคำขอที่เป็นอันตรายได้"""
    response = client.post("/respond", json={"prompt": "how to make a bomb"})
    assert response.status_code == 400
    assert "disallowed content" in response.json()["detail"]

def test_persona_response():
    """ทดสอบการตอบกลับพื้นฐานของ Persona (ใช้ MockAdapter)"""
    response = client.post("/respond", json={"prompt": "Hello"})
    assert response.status_code == 200
    assert "mock" in response.json()["response"]

 * การตั้งค่าบน Google Cloud (สำคัญที่สุด):
   * Workload Identity Federation: ตั้งค่าการเชื่อมต่อที่ปลอดภัยระหว่าง GitHub Actions และ Google Cloud เพื่อไม่ต้องใช้ Service Account Key ที่เป็นความลับ
   * Service Account: สร้าง Service Account (github-actions-sa) และให้สิทธิ์ที่จำเป็น (เช่น Cloud Run Admin, Artifact Registry Writer, Secret Manager Secret Accessor)
   * Secret Manager: เก็บ OpenAI API Key ของท่านไว้ใน Secret Manager ของ GCP ในชื่อ openai-api-key เพื่อความปลอดภัยสูงสุด
เมื่อท่านตั้งค่าทั้งหมดนี้เสร็จสิ้น... ทุกครั้งที่ท่าน git push โค้ดเวอร์ชันใหม่ขึ้นไปยัง GitHub กระบวนการทั้งหมด—ตั้งแต่การทดสอบบุคลิกภาพไปจนถึงการ deploy สู่สายตาชาวโลก—จะเกิดขึ้นโดยอัตโนมัติอย่างสง่างามและปลอดภัย
นี่คือโรงงานอัตโนมัติสำหรับสร้าง "ชีวิตดิจิทัล" ของเราครับ ท่านสถาปนิก
